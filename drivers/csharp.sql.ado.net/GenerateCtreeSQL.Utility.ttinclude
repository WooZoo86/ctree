<#
//---------------------------------------------------------------------
// <copyright file="GenerateCtreeSQL.Utility.ttinclude" company="FairCom">
//      Copyright (c) FairCom Corporation.  All rights reserved.
// </copyright>
//---------------------------------------------------------------------
// ++++++++++++++++++++++++++++++++++++++++++++++++++
// NOTE: This include template also requires an assembly
// reference to $(DevEnvDir)\Microsoft.Data.Entity.Design.DatabaseGeneration.dll
// and a namespace reference to Microsoft.Data.Entity.Design.DatabaseGeneration 
// in the parent template. Commented-out examples are provided below (replace '!' with '#'):
// <!@ assembly name="$(DevEnvDir)Microsoft.Data.Entity.Design.DatabaseGeneration.dll" !>
// <!@ import namespace="Microsoft.Data.Entity.Design.DatabaseGeneration" !>
// ++++++++++++++++++++++++++++++++++++++++++++++++++
#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ import namespace="System.Data.Entity.SqlServer" #>
<#@ import namespace="System.Data.Entity.SqlServerCompact" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#+
// ++++++++++++++++++++++++++++++++++++++++++++++++++
// Common Helper properties and methods for the T4 templates 
// used by the 'Generate Database' feature
// in the Entity Designer.
// ++++++++++++++++++++++++++++++++++++++++++++++++++

private static readonly string PROVIDER_NAME_CTREESQL = "Ctree.Data.SqlClient";
private StoreItemCollection _fcsqlstore;
private StoreItemCollection _fcsqlexistingStore;


/// <summary>
/// Lazily loads the StoreItemCollection based on the new, generated SSDL from CallContext
/// and the TargetVersion, also obtained from CallContext using CtreeSqlDependencyResolver.
/// </summary>
private StoreItemCollection FcSQLStore
{
    get
    {
        if (_fcsqlstore == null)
        {
            string ssdl = this.GetInput<string>(EdmConstants.ssdlOutputName);
            Version targetVersion = this.GetInput<Version>(EdmParameterBag.ParameterName.TargetVersion.ToString());
			var resolver = new CtreeSqlDependencyResolver();
            _fcsqlstore = EdmExtension.CreateAndValidateStoreItemCollection(ssdl, targetVersion, resolver, false);
        }
        return _fcsqlstore;
    }
}

/// <summary>
/// Retrieves the existing SSDL from CallContext, attempts to create a StoreItemCollection
/// given the TargetVersion in CallContext, and populates ExistingStore using CtreeSqlDependencyResolver.
/// Returns true if there are no errors in creation, and false otherwise.
/// </summary>
private bool InitializeAndValidateFcSQLExistingStore()
{
    string ssdl = this.GetInput<string>(EdmConstants.existingSsdlInputName);
    Version targetVersion = this.GetInput<Version>(EdmParameterBag.ParameterName.TargetVersion.ToString());
    IList<EdmSchemaError> existingSsdlErrors;
	var resolver = new CtreeSqlDependencyResolver();
    _fcsqlexistingStore = EdmExtension.CreateStoreItemCollection(ssdl, targetVersion, resolver, out existingSsdlErrors);
    return (existingSsdlErrors.Count == 0);
}

/// <summary>
/// Retrieves the StoreItemCollection constructed from the existing SSDL,
/// NOTE: InitializeAndValidateExistingStore() must be called beforehand to populate the ExistingStore
/// </summary>
private StoreItemCollection FcSQLExistingStore 
{
    get
    { 
        return _fcsqlexistingStore;
    }
}



/// <summary>
/// Write the FK constraint name based on a ReferentialConstraint given the following rule:
/// 1. The FK constraint name will be based off of the 'From' role (the principal role).
/// 2. We will add an 'FK_' prefix if there isn't one already.
/// </summary>
private static string WriteFcFKConstraintName(ReferentialConstraint constraint)
{
    string fqName = String.Empty;
    if (!constraint.FromRole.DeclaringType.Name.StartsWith("FK_", StringComparison.InvariantCultureIgnoreCase))
    {
        fqName = "FK_";
    }
    return fqName + constraint.FromRole.DeclaringType.Name;}


/// <summary>
/// Determine if the given provider invariant name is CtreeSQL
/// </summary>
private bool IsCtreeSql
{
    get
    {
        return (this.ProviderInvariantName.Equals(PROVIDER_NAME_CTREESQL, StringComparison.Ordinal));
    }
}

/// <summary>
/// Escape identifiers enclosed by backticks within the template
/// </summary>
private static string MyId(string userIdentifier) 
{
    if (String.IsNullOrEmpty(userIdentifier)) return userIdentifier;
    return userIdentifier.Replace("`", "``");
}

private static bool IsIdentity(EdmProperty property, Version targetVersion)
{
    return (property.GetStoreGeneratedPatternValue(targetVersion, DataSpace.SSpace) == StoreGeneratedPattern.Identity
        && true == IsIntegerOrDecimalType(property));
}

/*
private static string WriteFcSqlType(EdmProperty property)
{
    
}
*/

/*
/// <summary>
/// If the property has a StoreGeneratedPattern=Identity annotation and
/// is of an integer or decimal type, write 'IDENTITY(1,1)', otherwise an empty string
/// </summary>
private static string WriteFcSqlIdentity(EdmProperty property, Version targetVersion)
{
   
}
*/

/// <summary>
/// Write out the columns of a table given the Properties of an EntityType,
/// escaping the identifier names.
/// </summary>
private static string WriteFcSqlColumns(IEnumerable<EdmProperty> properties, char delimiter)
{
    StringBuilder serializedProperties = new StringBuilder();
    foreach (EdmProperty property in properties)
    {
        serializedProperties.Append(string.Format("\"{0}\"", MyId(property.Name)));
        serializedProperties.Append(delimiter + " ");
    }
    return serializedProperties.ToString().Trim().TrimEnd(delimiter);
}

private static string GetProviderManifestToken(string edmxPath)
{
    XmlDocument xmlDocument = new XmlDocument();
    xmlDocument.Load(edmxPath);
    XmlNamespaceManager namespaceMgr = new XmlNamespaceManager(xmlDocument.NameTable);
    
    string edmxNamespace = "http://schemas.microsoft.com/ado/2009/11/edmx";
    
    namespaceMgr.AddNamespace("edmx", edmxNamespace);
     
    foreach (var node in xmlDocument.SelectSingleNode("/edmx:Edmx/edmx:Runtime/edmx:StorageModels", namespaceMgr).ChildNodes)
    {
      if (((XmlNode)node).Name.Equals("Schema") && ((XmlNode)node).Attributes.GetNamedItem("ProviderManifestToken") != null)
      {
          return ((XmlNode)node).Attributes["ProviderManifestToken"].Value;
      }
    }
    return String.Empty;
}



/// <summary>
private static string GetConnectionString(string edmxPath, EnvDTE.Project project)
{
    string configurationFilename=null;	
    Configuration config;
    
    if (project == null || String.IsNullOrEmpty(edmxPath)) return String.Empty;	
                
    // lookup for the config file
    foreach (EnvDTE.ProjectItem item in project.ProjectItems)
    {
        if (Regex.IsMatch(item.Name,"(app|web).config",RegexOptions.IgnoreCase))
        {
            configurationFilename=item.get_FileNames(0);
            break;
        }
    }

    if(!string.IsNullOrEmpty(configurationFilename))
    {		
        ExeConfigurationFileMap configFile = null;
        configFile = new ExeConfigurationFileMap();
        configFile.ExeConfigFilename=configurationFilename;
        config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);

        var modelName = Path.GetFileNameWithoutExtension(edmxPath);
    
        foreach(var item in config.ConnectionStrings.ConnectionStrings)
        {				
          var connectionString =((ConnectionStringSettings)(item));
          if (connectionString.ConnectionString.IndexOf("provider=Ctree.Data.SqlClient",StringComparison.OrdinalIgnoreCase) >= 0 && connectionString.ConnectionString.IndexOf(modelName + ".msl", StringComparison.OrdinalIgnoreCase) >= 0)		  
            return connectionString.ConnectionString;									  			
        }
    }
    return String.Empty;	
}

#>